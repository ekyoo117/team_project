#%% BeautifulSoup과 통합

time.sleep(1)
#현재페이지 page_source
html= driver.page_source

#현재페이지를 BeautifulSoup과 통합
#이렇게 req에 소스를 저장했으면 
#이 req가 HTML parser를 사용해야한다고 선언 
from bs4 import BeautifulSoup
soup=BeautifulSoup(html,'html.parser')

'''
#header=soup.select('#the-python-tutorial > h1')
#header[0].text
#header=soup.select_one('#the-python-tutorial > h1')
#header.text
'''
#넘파이 로고 우측의 문구
header=soup.select_one('body > section.hero > div > div > div > div.flex-column > div.hero-subtitle')
#'The fundamental package for scientific computing with Python'
print(header.text)

----------------------------
https://signal.bz
selenium 기반으로 실시간 검색어 10개를 리스트 내포 출력
#app > div > main > div > section > div > section > section:nth-child(2) > div:nth-child(2) > div > div > div > a > span.rank-text
#app > div > main > div > section > div > section > section:nth-child(2) > div:nth-child(2) > div > div:nth-child(1) > div:nth-child(2) > a > span.rank-text
----------------------------------------------------------------------------
#app > div > main > div > section > div > section > section:nth-child(2) > div:nth-child(2) > div > div:nth-child(2) > div:nth-child(1) > a > span.rank-text
#app > div > main > div > section > div > section > section:nth-child(2) > div:nth-child(2) > div > div:nth-child(2) > div:nth-child(2) > a > span.rank-text
------------------------
고성능의 수치 계산을 하기 위해 만들어진 python package
배열의 모든 원소가 같은 자료형
반복문을 작성할 필요 없이  전체 데이터 배열에 대해 빠른 연산

-------------------------------------------
-quiz

1. 1차원 배열을 만들어 결과와 같이 출력하기
array([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28])

2. 2차원 배열을 만들어 결과와 같이 출력하기
array([[10, 20, 30, 40],
        [50, 60, 70, 80]])
     
3. 균일 간격이 10인 0에서 10(간격수) 사이의 등간격 배열 생성 코드 작성 
4. 정규분포를 따라 임의의 2차원 난수 배열 생성 코드 작성 
5. 10 에서 50을  10개로 나눈 등간격 수열 배열 생성후  2 x 5 크기의 2차 배열로 변환하는 코드 작성
6. 1 ~ 6 의 실수로 이루어진 2 x 3 크기의 데이터 행렬을 만든 후 조건에 맞는 코드 작성
조건1 
첫번째 행을 추출
조건 2 
array([1., 5.]) 를 추출
조건 3
3.0 이상인 요소를 추출
조건 4
3 x 2 크기의 행렬로 변환

7. 0 으로 구성된 2 x 2 크기의 배열 생성후 1차원 배열로 변환하는 코드 작성

----------------------------------
#%%
#1
import numpy as np
#np.array([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28])
np.arange(0,30,2)

#%%
#2
np.arange(10,90,10).reshape((2,4))

#%%
#3
np.linspace(0, 10, 10) 

#%%
#4
np.random.normal(0,1,(100,100))
#np.random.randn(100,100)

#%%
#5
np.linspace(10, 50,10).reshape(2,5)

#%%
#6
#dtype='float' 가능
arr=np.arange(1,7,dtype=float).reshape(2,3)
arr[0]
arr[[0,1],[0,1]]
arr[arr >= 3.]
arr.reshape(3,2)

#%%
#7
arr=np.zeros((2,2)) 
arr.reshape((-1,)) #arr.flatten()

-----------------------------------------
arr =  np.array([
                  [1.6,np.nan],
                  [3,None]
                 ] )

